/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016-2023 Objectionary.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.eolang.parser;

import com.jcabi.xml.XML;
import com.jcabi.xml.XMLDocument;
import com.yegor256.xsline.StEnvelope;
import com.yegor256.xsline.StLambda;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.xembly.Directives;
import org.xembly.Xembler;

/**
 * Add attribute 'hash' in node 'program' in XML.
 * Returns already XML with hash.
 *
 * @since 0.35.0
 */
public final class StHash extends StEnvelope {

    /**
     * Returns XML with attribute 'hash'.
     */
    public StHash() {
        super(
            new StLambda((
                position,
                xml) ->
                new XMLDocument(
                    new Xembler(
                        new Directives().xpath("//program").attr("hash", new Hash(xml).getHash())
                    ).apply(xml.node())
                )
            )
        );
    }

    /**
     * Hash is generated by MD5 using node '/program/objects'.
     * Returns program hash.
     *
     * @since 0.35.0
     */
    public static final class Hash {

        /**
         * XML for which the hash code will be made.
         */
        private final XML xml;

        /**
         * The constructor.
         *
         * @param xml XML for which the hash code will be made.
         */
        public Hash(final XML xml) {
            this.xml = xml;
        }

        /**
         * Return program hash using node "/program/objects".
         *
         * @return String hash of this XML.
         * @throws NoSuchAlgorithmException If fails.
         */
        public String getHash() throws NoSuchAlgorithmException {
            final MessageDigest algorithm = MessageDigest.getInstance("MD5");
            final String program = this.xml.nodes("/program/objects").toString();
            final byte[] code = algorithm.digest(program.getBytes());
            final BigInteger number = new BigInteger(1, code);
            final StringBuilder hash = new StringBuilder(number.toString(16));
            while (hash.length() < 32) {
                hash.insert(0, "0");
            }
            return hash.toString();
        }
    }
}

